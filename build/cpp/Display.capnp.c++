// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Display.capnp

#include "Display.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<111> b_f78ad61dfdc7cdfc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    252, 205, 199, 253,  29, 214, 138, 247,
     14,   0,   0,   0,   1,   0,   2,   0,
     68,   0, 124, 199, 242,  41, 187, 154,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68, 105, 115, 112, 108,  97, 121,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    115, 115,  97, 103, 101,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    195,  51,  66,  13, 138, 142, 100, 247,
      1,   0,   0,   0,  98,   0,   0,   0,
     77, 101, 115, 115,  97, 103, 101,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    195,  51,  66,  13, 138, 142, 100, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  50,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,  50,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 108, 111, 114,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f78ad61dfdc7cdfc = b_f78ad61dfdc7cdfc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f78ad61dfdc7cdfc[] = {
  &s_f7648e8a0d4233c3,
};
static const uint16_t m_f78ad61dfdc7cdfc[] = {5, 0, 1, 3, 2, 4};
static const uint16_t i_f78ad61dfdc7cdfc[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_f78ad61dfdc7cdfc = {
  0xf78ad61dfdc7cdfc, b_f78ad61dfdc7cdfc.words, 111, d_f78ad61dfdc7cdfc, m_f78ad61dfdc7cdfc,
  1, 6, i_f78ad61dfdc7cdfc, nullptr, nullptr, { &s_f78ad61dfdc7cdfc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<44> b_f7648e8a0d4233c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195,  51,  66,  13, 138, 142, 100, 247,
     22,   0,   0,   0,   2,   0,   0,   0,
    252, 205, 199, 253,  29, 214, 138, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 127,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68, 105, 115, 112, 108,  97, 121,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    115, 115,  97, 103, 101,  46,  77, 101,
    115, 115,  97, 103, 101,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 114,  97, 119,  80, 105, 120, 101,
    108,   0,   0,   0,   0,   0,   0,   0,
    100, 114,  97, 119,  76, 105, 110, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 114,  97, 119,  82, 101,  99, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 108,  82, 101,  99, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 108,  83,  99, 114, 101,
    101, 110,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7648e8a0d4233c3 = b_f7648e8a0d4233c3.words;
#if !CAPNP_LITE
static const uint16_t m_f7648e8a0d4233c3[] = {1, 0, 2, 3, 4};
const ::capnp::_::RawSchema s_f7648e8a0d4233c3 = {
  0xf7648e8a0d4233c3, b_f7648e8a0d4233c3.words, 44, nullptr, m_f7648e8a0d4233c3,
  0, 5, nullptr, nullptr, nullptr, { &s_f7648e8a0d4233c3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MessageType_f7648e8a0d4233c3, f7648e8a0d4233c3);
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Message
constexpr uint16_t Message::_capnpPrivate::dataWordSize;
constexpr uint16_t Message::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Message::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Message::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



